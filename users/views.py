import uuid
from datetime import timedelta

from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import render, HttpResponseRedirect
from django.utils.timezone import now

from users.forms import UserLoginForm, UserRegisterForm, UserProfileForm
from users.models import User, EmailVerification
from django.contrib import auth, messages
from django.urls import reverse, reverse_lazy
from products.models import Basket
from django.contrib.auth.views import LogoutView, LoginView
from common.views import TitleMixin
from django.views.generic.edit import UpdateView, DeleteView, CreateView
from django.views.generic.base import TemplateView


class UserLoginView(TitleMixin, LoginView):
    template_name = 'users/login.html'
    form_class = UserLoginForm
    title = 'GeekShop - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'

    def form_valid(self, form):
        username = form.cleaned_data.get('username')
        messages.success(self.request, f'{username}, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!')
        return super().form_valid(form)


class UserRegistrationView(TitleMixin, CreateView):
    model = User
    template_name = 'users/registration.html'
    form_class = UserRegisterForm
    success_url = reverse_lazy('users:login')
    title = 'GeekShop - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'

    def form_valid(self, form):
        username = form.cleaned_data.get('username')
        response = super().form_valid(form)

        messages.success(self.request, f'–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}, –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞!')
        return response


class EmailVerificationView(TitleMixin, TemplateView):
    template_name = 'users/email_verification.html'
    title = 'GeekShop - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã'

    def get(self, request, *args, **kwargs):
        code = kwargs.get('code')
        user = User.objects.get(email=kwargs.get('email'))
        email_verification = EmailVerification.objects.filter(user=user, code=code).first()

        if email_verification.is_expired:
            email_verification.code = uuid.uuid4()
            email_verification.expiration = now() + timedelta(hours=48)
            email_verification.save()
            email_verification.send_verification_email(is_expired=True)
            messages.error(request, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫! –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É!')
            return HttpResponseRedirect(reverse('index'))


        if email_verification:
            user.is_verified_email = True
            user.save()
            messages.success(request, '–í–∞—à–∞ –ø–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!')
            return super().get(request, *args, **kwargs)
        else:
            messages.error(request, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫! –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É!')
            return HttpResponseRedirect(reverse('index'))


class UserProfileView(TitleMixin, LoginRequiredMixin, UpdateView):
    model = User
    template_name = 'users/profile.html'
    form_class = UserProfileForm
    login_url = reverse_lazy('users:login')
    title = 'Store - –ü—Ä–æ—Ñ–∏–ª—å'

    def get_object(self, queryset=None):
        return self.request.user

    def get_success_url(self):
        return reverse_lazy('users:profile', kwargs={'pk': self.object.id})


class UserLogoutView(LogoutView):
    def dispatch(self, request, *args, **kwargs):
        username = request.user.username
        messages.success(request, f'{username}, –≤—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ üòí!')
        return super().dispatch(request, *args, **kwargs)










